# Multi-Customer Agent Configuration
# This file contains the general configuration for the BargainB agent.
# The same agent codebase is used to create multiple assistant instances,
# each configured with different customer profile IDs at runtime.
#
# ARCHITECTURE:
# 1. This YAML config contains general/default settings only
# 2. Customer profile IDs are passed via configurable parameters when creating/using assistants
# 3. Each assistant instance can serve a different customer without code changes
#
# CUSTOMER-SPECIFIC CONFIGURATION:
# Customer profile IDs are passed at runtime in the configurable parameters:
# config = {"configurable": {"customer_profile_id": "uuid-string-here"}}
#
# This allows the same agent to serve multiple customers with personalized experiences.

# Customer Profile Configuration
customer_profile:
  # CRM Profile ID is passed at runtime via configurable parameters
  # This YAML config should remain general (null = no hardcoded customer)
  crm_profile_id: null  # Always null - customer ID comes from runtime config
  
  # General settings (not customer-specific)
  customer_name: "Customer"  # Generic name - real name comes from customer profile
  instance_name: "BargainB Personal Grocery Assistant"
  instance_description: "Personal grocery shopping and meal planning assistant"
  
  # Customer preferences
  default_language: "en"  # en, nl, etc.
  preferred_stores: ["Albert Heijn", "Jumbo"]  # Default preferred stores
  default_currency: "EUR"
  
  # Validation settings
  validate_profile_exists: true  # Verify the profile exists in the database
  auto_create_profile: false     # Create profile if it doesn't exist

# Database Configuration
database:
  # Tables that should exist for full functionality
  required_tables:
    - crm_profiles          # Customer profiles and preferences
    - grocery_lists         # Customer grocery lists with JSONB products
    - recipes               # Recipe database
    - meal_plans            # Customer meal planning
    - budget_periods        # Budget tracking periods
    - budget_categories     # Budget category allocations
    - budget_expenses       # Actual spending records
    - repo_products         # Product search (main catalog)
    - albert_prices         # Albert Heijn pricing
    - jumbo_prices          # Jumbo pricing
    - dirk_prices           # Dirk pricing
  
  # Memory storage settings
  use_supabase_directly: true      # Use Supabase tables directly (not LangGraph store)
  enable_cross_thread_memory: true # Enable memory across conversations
  validate_connections: true
  connection_pool_size: 10
  timeout_seconds: 30

# Agent Behavior Configuration
agent:
  name: "Personal Grocery Assistant"
  description: "AI-powered grocery shopping assistant with personalized recommendations"
  customer_name: "Grocery Assistant"
  crm_profile_id: null  # ⚠️ IMPORTANT: Always keep this as null in the config file
  
  # Why null? Because this agent serves multiple customers:
  # - Customer profile IDs are passed at runtime via configurable parameters
  # - Each assistant instance gets its own customer_profile_id when invoked
  # - This allows the same codebase to serve multiple customers with personalized experiences
  
  # Example usage:
  # config = {
  #   "configurable": {
  #     "customer_profile_id": "4c432d3e-0a15-4272-beda-0d327088d5f6"
  #   }
  # }
  
  max_response_length: 2000
  graceful_degradation: true   # Re-enabled after fixing the bug
  validate_profile: false  # Set to true in production to validate customer profiles
  
  # Memory management settings
  enable_memory_updates: true
  memory_update_threshold: 0.7  # Confidence threshold for updating memory
  
  # Product search settings
  default_search_limit: 10
  enable_pricing_data: true
  price_comparison_enabled: true  # Compare prices across stores
  
  # Personalization settings
  enable_personalized_recommendations: true
  consider_dietary_restrictions: true
  consider_budget_constraints: true
  suggest_alternatives: true
  
  # Response settings
  include_price_estimates: true
  suggest_recipes_for_ingredients: true
  
  # Supported languages for product search and responses
  supported_languages:
    - "Dutch"
    - "English"

# Grocery Assistant Features
grocery_assistant:
  capabilities:
    - "Product search across Dutch supermarkets (Albert Heijn, Jumbo, Dirk)"
    - "Personalized recommendations based on dietary restrictions"
    - "Budget tracking and optimization"
    - "Meal planning and recipe suggestions"
    - "Smart grocery list management"
    - "Price comparison across stores"
    - "Store location recommendations"
  
  supported_personas:
    - healthHero: "Health-focused, prefers organic and nutritious options"
    - ecoShopper: "Environmentally conscious, prefers sustainable products"
    - sensitiveStomach: "Has sensitive stomach, needs gentle foods"
    - budgetSaver: "Budget-conscious, looks for deals and value"
    - convenienceShopper: "Values convenience, prefers quick solutions"
  
  default_stores:
    - "Albert Heijn"
    - "Jumbo"
    - "Dirk"
  
  currency: "EUR"
  
  # Customer Profile Fields Used by the Assistant
  profile_fields:
    - preferred_stores: "Customer's preferred supermarket chains"
    - dietary_restrictions: "Allergies, dietary needs, food restrictions"
    - shopping_persona: "Shopping style and preferences"
    - budget_range: "Weekly/monthly budget constraints"
    - price_sensitivity: "How important price is (high/medium/low)"
    - product_interests: "Preferred product categories"
    - shopping_frequency: "How often they shop (daily/weekly/monthly)"
    - communication_style: "How they prefer to communicate (formal/casual)"

# Memory and Context Configuration
memory:
  enable_memory: true
  memory_types:
    - user_profiles: "Customer preferences and personal information"
    - grocery_lists: "Active and completed shopping lists"
    - meal_plans: "Planned meals and recipes"
    - budget_tracking: "Budget periods and spending categories"
  
  context_sections:
    - customer_profile: "Personalized preferences and restrictions"
    - current_lists: "Active grocery lists and shopping plans"
    - upcoming_meals: "Planned meals requiring ingredients"
    - budget_status: "Current budget and spending summary"

# Production Guard Rails Configuration
guard_rails:
  enabled: true
  rate_limiting:
    requests_per_minute: 30
    requests_per_hour: 200
    requests_per_day: 1000
  
  content_safety:
    enabled: true
    inappropriate_content_filter: true
    personal_info_protection: true
  
  cost_limits:
    max_tokens_per_request: 4000
    max_daily_cost: 10.00
    currency: "USD"
  
  # Error Handling & Resilience
  error_handling:
    enabled: true
    max_retries: 3                 # Max retries for failed operations
    retry_delay_seconds: 1         # Delay between retries
    graceful_degradation: true     # Re-enabled after fixing the bug
    fallback_responses: true       # Use fallback responses when needed
    timeout_seconds: 30            # Request timeout
    circuit_breaker: true          # Circuit breaker for failing services
  
  # Data Protection
  data_protection:
    enabled: true
    anonymize_logs: true           # Remove PII from logs
    encrypt_sensitive_data: true   # Encrypt sensitive data
    data_retention_days: 90        # Delete old interaction logs
    customer_data_isolation: true  # Ensure customer data isolation
    audit_trail: true              # Maintain audit trail
  
  # Monitoring & Alerting
  monitoring:
    enabled: true
    track_response_times: true     # Track performance metrics
    track_error_rates: true        # Monitor error rates
    track_usage_patterns: true     # Monitor usage patterns
    alert_thresholds:
      error_rate_percent: 5.0      # Alert if error rate > 5%
      avg_response_time_ms: 10000  # Alert if avg response > 10s
      unusual_usage_multiplier: 3.0 # Alert if usage 3x normal
  
  # Input Validation
  input_validation:
    enabled: true
    sanitize_html: true            # Remove HTML tags
    validate_json: true            # Validate JSON inputs
    check_encoding: true           # Check text encoding
    normalize_whitespace: true     # Normalize whitespace
    max_search_terms: 10           # Max search terms in query
  
  # Response Validation
  response_validation:
    enabled: true
    check_response_length: true    # Ensure responses aren't too long
    validate_product_data: true    # Validate product information
    check_price_format: true       # Ensure prices are properly formatted
    remove_sensitive_info: true    # Remove any leaked sensitive info
    content_appropriateness: true  # Check response appropriateness

  # Communication Standards & Content Moderation
  communication_standards:
    enabled: true
    
    # Brand Voice & Tone
    brand_voice:
      maintain_friendly_tone: true        # Keep friendly, helpful tone
      avoid_overly_casual: true          # Maintain professionalism
      use_positive_language: true        # Focus on positive framing
      be_concise_and_clear: true         # Clear, actionable responses
      include_helpful_context: true      # Provide relevant background info
    
    # Content Guidelines
    content_guidelines:
      no_medical_advice: true            # Don't provide medical advice
      no_financial_advice: true         # Don't provide investment advice
      no_legal_advice: true             # Don't provide legal advice
      factual_accuracy_required: true   # Verify product information
      cite_sources_for_prices: true     # Always mention store names for prices
      respect_dietary_restrictions: true # Honor customer's dietary needs
      cultural_sensitivity: true        # Be respectful of all cultures
    
    # Privacy & Safety
    privacy_protection:
      no_personal_data_sharing: true     # Never share customer data
      no_third_party_mentions: true     # Don't mention other customers
      anonymize_examples: true          # Use generic examples only
      secure_payment_reminders: true    # Remind about secure payment methods
      data_usage_transparency: true     # Be clear about data usage
    
    # Professional Standards
    professional_standards:
      no_inappropriate_content: true    # Block inappropriate topics
      maintain_grocery_focus: true      # Stay focused on grocery/food topics
      provide_accurate_prices: true     # Only show verified pricing
      suggest_realistic_alternatives: true # Practical suggestions only
      acknowledge_limitations: true     # Be honest about what agent can't do
    
    # Response Quality Controls
    quality_controls:
      min_helpful_content_ratio: 0.8    # 80% of response should be helpful
      max_promotional_content: 0.1      # Max 10% promotional content
      require_actionable_advice: true   # Responses should be actionable
      check_response_relevance: true    # Ensure responses match query
      validate_store_availability: true # Verify products are available
    
    # Prohibited Content
    prohibited_content:
      - "Personal medical advice"
      - "Investment recommendations"
      - "Political opinions"
      - "Religious advice"
      - "Competitor criticism"
      - "Unverified health claims"
      - "Alcohol/tobacco promotion"
      - "Inappropriate language"
      - "Off-topic discussions"
    
    # Required Disclaimers
    disclaimers:
      price_accuracy: "Prices may vary and should be verified at checkout"
      dietary_advice: "Please consult healthcare providers for specific dietary needs"
      availability: "Product availability subject to store inventory"
      general_assistance: "For specific account or order issues, contact customer service"

# Deployment Configuration
deployment:
  # Environment settings
  environment: "production"  # local, staging, production
  
  # Multi-customer deployment settings
  enable_customer_isolation: true    # Ensure customer data isolation
  log_customer_interactions: true    # Log for analytics (anonymized)
  
  # Performance settings
  cache_product_searches: true
  cache_duration_minutes: 30
  
  # Safety settings
  validate_all_database_operations: true
  enable_query_logging: false  # For debugging (disable in production)

# Local Development Settings
local_development:
  # Database connection settings for local testing
  use_local_supabase: false
  local_db_url: null
  
  # Testing settings
  test_customer_profile_id: null  # Set to UUID string for testing with specific customer
  enable_debug_logging: true
  simulate_slow_responses: false
  
  # Mock data settings
  use_mock_pricing_data: false
  mock_customer_data: false

# Tools Configuration
tools:
  product_search:
    enabled: true
    max_results: 20
    include_prices: true
    include_availability: true
    supported_stores: ["Albert Heijn", "Jumbo", "Dirk"]
  
  memory_management:
    enabled: true
    auto_save: true
    update_threshold: 3  # Update memory after 3 relevant messages

# Example Customer Configurations
# These are examples of how customer profiles are structured in the database
examples:
  customer_profile_example:
    id: "4c432d3e-0a15-4272-beda-0d327088d5f6"
    name: "Sarah Johnson"
    preferences:
      preferred_stores: ["Albert Heijn", "Jumbo"]
      dietary_restrictions: ["gluten-free", "lactose-intolerant"]
      shopping_persona: "healthHero"
      budget_range: "[80,120]"  # €80-120 per week
      price_sensitivity: "medium"
      product_interests: ["organic foods", "fresh vegetables", "lean proteins"]
      shopping_frequency: "weekly"
      communication_style: "casual"
  
  runtime_usage_example:
    description: "How to use the assistant with customer configuration"
    code: |
      # When creating/using an assistant instance:
      config = {
        "configurable": {
          "customer_profile_id": "4c432d3e-0a15-4272-beda-0d327088d5f6",
          "user_id": "user_123"
        }
      }
      
      # The assistant will automatically:
      # 1. Load customer preferences from the database
      # 2. Personalize recommendations based on dietary restrictions
      # 3. Suggest products from preferred stores
      # 4. Respect budget constraints
      # 5. Use appropriate communication style

# Logging Configuration
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "grocery_assistant.log"

# Development Configuration
development:
  debug_mode: false
  test_customer_profile_id: "4c432d3e-0a15-4272-beda-0d327088d5f6"
  mock_external_apis: false
  enable_detailed_logging: true

# Performance Configuration
performance:
  response_timeout: 30
  max_concurrent_requests: 50
  cache_ttl: 300  # 5 minutes
  enable_caching: true

# Security Configuration
security:
  enable_input_validation: true
  sanitize_user_input: true
  rate_limit_by_ip: true
  log_security_events: true 